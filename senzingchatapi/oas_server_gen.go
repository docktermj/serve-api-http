// Code generated by ogen, DO NOT EDIT.

package senzingchatapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// EntityDetailsEntityDetailsGet implements entity_details_entity_details_get operation.
	//
	// Retrieve entity data based on the ID of a resolved identity.
	//
	// GET /entity_details
	EntityDetailsEntityDetailsGet(ctx context.Context, params EntityDetailsEntityDetailsGetParams) (EntityDetailsEntityDetailsGetRes, error)
	// EntityHowEntityHowGet implements entity_how_entity_how_get operation.
	//
	// Determines and details steps-by-step how records resolved to an ENTITY_ID.
	//
	// GET /entity_how
	EntityHowEntityHowGet(ctx context.Context, params EntityHowEntityHowGetParams) (EntityHowEntityHowGetRes, error)
	// EntityReportEntityReportGet implements entity_report_entity_report_get operation.
	//
	// Return 10 entities with either matches, possible matches, or relationships.
	//
	// GET /entity_report
	EntityReportEntityReportGet(ctx context.Context, params EntityReportEntityReportGetParams) (EntityReportEntityReportGetRes, error)
	// EntitySearchEntitySearchPost implements entity_search_entity_search_post operation.
	//
	// Retrieves entity data based on a user-specified set of entity attributes.
	//
	// POST /entity_search
	EntitySearchEntitySearchPost(ctx context.Context, req *SearchAttributes) (EntitySearchEntitySearchPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
